package factory;

import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.Objects;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.github.bonigarcia.wdm.WebDriverManager;
import util.Util;



public class DriverManage {
	
	  // private static WebDriver driver;
	   private static ThreadLocal<WebDriver> driver = new ThreadLocal<>();
	  // private static ThreadLocal<WebDriver> driver = new ThreadLocal<>();
	   
	   public Util util;
	   
	   public DriverManage() {
		   
		   
		   this.util=util;
		   
	   }
	   
	   
	   

	    //util.driver =  new ChromeDriver();
	    
	    //driver.get("https://linkinpark.com/");
	    
	    //util.driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
	   
	   public  WebDriver startDriver() throws IOException {
		   
		   FileInputStream file = new FileInputStream(System.getProperty("user.dir")+"//src//test//resources//global.properties");
		   Properties prop = new Properties();
		   prop.load(file);
		   
		   String url= prop.getProperty("QAurl");
		   
		   System.out.println(url);
		   
		   Objects.isNull(driver); //--- usar para verificação de null 
		   Objects.nonNull(driver);
		   //driver == null
		   
		   if(Objects.isNull(driver)) {
			   
				/*
				 * if(prop.getProperty("browser").equalsIgnoreCase("chrome")) { //
				 * equalsIgnoreCase method sets the strings from the global properties without
				 * capslock
				 * 
				 * driver = new ChromeDriver(); driver.manage().window().maximize();
				 * driver.get(url); }
				 */
			   
			   String browser_properties = prop.getProperty("browser").toLowerCase();
			   String browser_maven=System.getProperty("browser").toLowerCase();
			   

			   String browser = browser_maven != null ? browser_maven : browser_properties;  // to take priority on the browser passed on mvn command line 

			   
			   
		       switch (browser) {
	            case "chrome":
	                WebDriverManager.chromedriver().setup();
	                ChromeOptions options = new ChromeOptions();
	 			   	options.addArguments("--headless"); // Run in headless mode
	 			   	options.addArguments("--disable-gpu"); // Optional: for Windows
	 			   //options.addArguments("--window-size=1920,1080"); // Optional: set screen size
	                driver = new ChromeDriver(options);
	                break;

	            case "firefox":
	                WebDriverManager.firefoxdriver().setup();
	                driver = new FirefoxDriver();
	                break;

	            case "edge":
	                WebDriverManager.edgedriver().setup();
	                driver = new EdgeDriver();
	                break;

	            default:
	                throw new IllegalArgumentException("Browser not supported: " + browser);
	        }

	        driver.manage().window().maximize();
	        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
	        driver.get(url);
			   
		    }
			return driver;
			
			
			// metodo navigate para ir po url 
			// class separada da pagina 
			// ideal para o url vir das step definition
			// 
			
			
			
			
//			if (Objects.isNull(driver.get())) {
//	           // String browser = prop.getProperty("browser").toLowerCase();
//
//	            switch (browser) 
//	            {
//	                case "chrome":
//	                    WebDriverManager.chromedriver().setup();
//	                    driver.set(new ChromeDriver());
//	                    break;
//	                case "firefox":
//	                    WebDriverManager.firefoxdriver().setup();
//	                    driver.set(new FirefoxDriver());
//	                    break;
//	                case "edge":
//	                    WebDriverManager.edgedriver().setup();
//	                    driver.set(new EdgeDriver());
//	                    break;
//	                default:
//	                    throw new IllegalArgumentException("Browser not supported: " + browser);
//	                    
//	            }
//
//	            driver.get().manage().window().maximize();
//	            driver.get().get(url);
//	        }
//
//	        
//		   }
//		   return driver.get();
			   
			   
			   
	    }

	    
	   
	   
	   
		/*
		 * public static WebDriver initDriver(String browser) { if (driver == null) {
		 * WebDriverManager.chromedriver().setup(); driver = new ChromeDriver(); }
		 * return driver; }
		 */

	    
		/*
		 * public static void quitDriver() { if (Objects.nonNull(driver)) {
		 * driver.quit(); driver = null; } }
		 */
	    
	    
	    
		
		  public static void quitDriver() 
		  { if (Objects.nonNull(driver)) {
		  
			  driver.quit(); driver = null; // important to clean up 
		  
		  } }
		 

}
